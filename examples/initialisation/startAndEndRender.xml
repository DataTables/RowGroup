<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="3">

<css lib="datatables rowgroup">
table.dataTable tr.dtrg-group.dtrg-end th {
	text-align: right;
	font-weight: normal;
}
</css>
<js lib="jquery datatables rowgroup">
<![CDATA[

$('#example').DataTable({
	order: [[2, 'asc']],
	rowGroup: {
		dataSrc: 2,
		endRender: function (rows, group) {
			var avg =
				rows
					.data()
					.pluck(5)
					.reduce(function (a, b) {
						return a + b.replace(/[^\d]/g, '') * 1;
					}, 0) / rows.count();

			// Use the DataTables number formatter
			return (
				'Average salary in group: ' +
				DataTable.render.number(null, null, 0, '$').display(avg)
			);
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	order: [[2, 'asc']],
	rowGroup: {
		dataSrc: 2,
		endRender: function (rows, group) {
			var avg =
				rows
					.data()
					.pluck(5)
					.reduce((a, b) => a + b.replace(/[^\d]/g, '') * 1, 0) / rows.count();

			// Use the DataTables number formatter
			return (
				'Average salary in group: ' +
				DataTable.render.number(null, null, 0, '$').display(avg)
			);
		}
	}
});

]]>
</js-vanilla>

<title lib="RowGroup">Start and end grouping</title>

<info><![CDATA[

It can often be useful to have grouping rows at the start and the end of a group to show different summary information about the group. RowGroup provides two rendering options - `-init rowGroup.startRender` and `-init rowGroup.endRender` - as the naming implies, one for the group start and one for the group end, allowing them to be configured independently.

This example shows the `-init rowGroup.startRender` left with its default state, while the `-init rowGroup.endRender` shows a summary of the information in the group - in this case an average salary.

]]></info>

</dt-example>

